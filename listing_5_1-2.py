#!/usr/bin/python

import argparse
import os
import networkx
from networkx.drawing.nx_pydot import write_dot
import itertools
import pprint
import pefile
import hashlib
from capstone import Cs, CS_ARCH_X86, CS_MODE_32

"""
Copyright (c) 2015, Joshua Saxe
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name 'Joshua Saxe' nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL JOSHUA SAXE BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""



def jaccard(set1,set2):
    """
    Compute the Jaccard distance between two sets by taking
    their intersection, union and then dividing the number
    of elements in the intersection by the number of elements
    in their union.
    """
    intersection = set1.intersection(set2)
    intersection_length = float(len(intersection))
    union = set1.union(set2)
    union_length = float(len(union))
    return intersection_length / union_length

# ---------------------------------------------------------------------------- #
# Start of function added for QUESTION 2
# ---------------------------------------------------------------------------- #
def getinstructionngrams(fullpath, n):
    """
    Extract the instruction n-grams of size n from the binary indicated by the
    'fullpath' parameter, reading a maximum of the first 500 bytes, and then
    return these n-grams as the set of n-grams in the binary.
    """
    file = pefile.PE(fullpath)
    text = None

    # extract the text section
    for section in file.sections:
        if section.Name == b'.text\x00\x00\x00':
            text = section

    # return None if the file does not have a text section
    if text is None:
        return None

    # get the start and end of the text section that will be considered
    start = text.VirtualAddress
    end = start + min(text.Misc_VirtualSize, 5000)

    # return None if the text section is smaller than the n-gram size
    if end-start < n:
        return None

    # extract n-grams of the specified size from the file
    data = file.get_memory_mapped_image()[start:end]
    return set(data[i:i+n] for i in range(end-start-n+1))

# ---------------------------------------------------------------------------- #
# End of function added for QUESTION 2
# ---------------------------------------------------------------------------- #

def pecheck(fullpath):
    """
    Do a cursory sanity check to make sure 'fullpath' is
    a Windows PE executable (PE executables start with the
    two bytes 'MZ')
    """
    return open(fullpath).read(2) == "MZ"

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Identify similarities between malware samples and build similarity graph"
    )

    parser.add_argument(
        "target_directory",
        help="Directory containing malware"
    )

    parser.add_argument(
        "output_dot_file",
        help="Where to save the output graph DOT file"
    )

    parser.add_argument(
        "n_grams",
        help="N-gram size for similarity calculation"
    )

    parser.add_argument(
        "--jaccard_index_threshold","-j",dest="threshold",type=float,
        default=0.8,help="Threshold above which to create an 'edge' between samples"
    )

    args = parser.parse_args()
    malware_paths = [] # where we'll store the malware file paths
    malware_attributes = dict() # where we'll store the malware strings
    graph = networkx.Graph() # the similarity graph

    for root, dirs, paths in os.walk(args.target_directory):
        # walk the target directory tree and store all of the file paths
        for path in paths:
            full_path = os.path.join(root,path)
            malware_paths.append(full_path)

    # filter out any paths that aren't PE files
    malware_paths = filter(pecheck, malware_paths)

    # ------------------------------------------------------------------------ #
    # The following block of code was modified for QUESTION 2
    # ------------------------------------------------------------------------ #

    # get and store the instruction N-grams for all of the malware PE files
    for path in malware_paths:
        attributes = getinstructionngrams(path, int(args.n_grams))

        # Add to graph if it has an instruction section
        if attributes is not None:
            print "Extracted {0} attributes from {1} ...".format(len(attributes),path)
            malware_attributes[path] = attributes

            # add each malware file to the graph
            graph.add_node(path,label=os.path.split(path)[-1][:10])

        # Skip it otherwise
        else:
            continue

    # iterate through all pairs of malware
    for malware1,malware2 in itertools.combinations(malware_paths,2):

        # catch KeyErrors, meaning there is no attributes for the given malware sample
        try:
            # compute the jaccard distance for the current pair
            jaccard_index = jaccard(malware_attributes[malware1],
                malware_attributes[malware2])
        except KeyError:
            continue

    # ------------------------------------------------------------------------ #
    # End of code modified for QUESTION 2
    # ------------------------------------------------------------------------ #

        # if the jaccard distance is above the threshold add an edge
        if jaccard_index > args.threshold:
            print malware1,malware2,jaccard_index
            graph.add_edge(malware1,malware2,penwidth=1+(jaccard_index-args.threshold)*10)

    # write the graph to disk so we can visualize it
    write_dot(graph,args.output_dot_file)
